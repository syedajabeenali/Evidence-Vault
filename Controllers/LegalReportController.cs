using EvidenceVault.Data;
using EvidenceVault.DTO;
using EvidenceVault.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System.IO;

namespace EvidenceVault.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LegalReportController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly IWebHostEnvironment _env;

        public LegalReportController(ApplicationDbContext context, IWebHostEnvironment env)
        {
            _context = context;
            _env = env;
        }

        [HttpPost("generate")]
        public async Task<IActionResult> GenerateLegalReport([FromBody] GenerateLegalReportRequestDto request)
        {
            var caseInfo = await _context.Cases
                .Include(c => c.User)
                .FirstOrDefaultAsync(c => c.CaseID == request.CaseID);

            if (caseInfo == null)
                return NotFound("Case not found.");

            var evidences = await _context.Evidences
                .Where(e => e.CaseID == request.CaseID)
                .ToListAsync();

            if (!evidences.Any())
                return BadRequest("No evidences found for this case.");

            var generatedByUser = await _context.Users.FindAsync(request.GeneratedByUserID);

            if (generatedByUser == null)
                return BadRequest("Invalid GeneratedBy User ID.");

            var reportFolder = Path.Combine(_env.WebRootPath ?? Path.Combine(Directory.GetCurrentDirectory(), "wwwroot"), "reports");
            if (!Directory.Exists(reportFolder))
                Directory.CreateDirectory(reportFolder);

            var fileName = $"Case_{caseInfo.CaseID}_Report_{DateTime.Now.Ticks}.pdf";
            var filePath = Path.Combine(reportFolder, fileName);

            var logoPath = Path.Combine(_env.WebRootPath ?? Path.Combine(Directory.GetCurrentDirectory(), "wwwroot"), "images", "logo.png");
            var logoBytes = System.IO.File.Exists(logoPath) ? System.IO.File.ReadAllBytes(logoPath) : null;

            var document = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(40);
                    page.Size(PageSizes.A4);

                    page.Header().Row(row =>
                    {
                        if (logoBytes != null)
                        {
                            row.RelativeColumn(1).Height(80).Image(logoBytes);
                        }

                        row.RelativeColumn(3).AlignCenter().Text("Legal Evidence Report")
                            .FontSize(24)
                            .Bold()
                            .FontColor(Colors.Blue.Darken2);
                    });

                    page.Content().PaddingTop(20).Column(col =>
                    {
                        col.Spacing(10);

                        col.Item().Text($"Case Title: {caseInfo.CaseTitle}").FontSize(18).Bold();
                        col.Item().Text($"Case Description: {caseInfo.Description}").FontSize(14);
                        col.Item().Text($"Generated By: {generatedByUser.Name}").FontSize(14);
                        col.Item().Text($"Generated At: {DateTime.Now}").FontSize(14);

                        col.Item().PaddingTop(20).Text("Evidence List:").FontSize(18).Bold();

                        foreach (var evidence in evidences)
                        {
                            col.Item().PaddingLeft(10).Text(
                                $"- {evidence.FileName} ({evidence.FileType}), Uploaded: {evidence.UploadedAt:yyyy-MM-dd}"
                            ).FontSize(12);
                        }
                    });

                    page.Footer().AlignCenter().Text(x =>
                    {
                        x.CurrentPageNumber();
                        x.Span(" / ");
                        x.TotalPages();
                    });
                });
            })
  .WithMetadata(new DocumentMetadata
  {
      Title = $"Legal Report - {caseInfo.CaseTitle}",
      Author = generatedByUser.Name,
      Subject = "Legal Evidence Report",
      Keywords = "Evidence, Case, Legal Report"
  });

            document.GeneratePdf(filePath);


            // Save into database
            var legalReport = new LegalReport
            {
                CaseID = caseInfo.CaseID,
                GeneratedBy = request.GeneratedByUserID,
                ReportFilePath = $"reports/{fileName}",
                GeneratedAt = DateTime.Now
            };

            _context.LegalReports.Add(legalReport);
            await _context.SaveChangesAsync();

            return Ok(new { message = "PDF report generated successfully.", reportPath = legalReport.ReportFilePath });
        }

        [HttpGet("all")]
        public async Task<IActionResult> GetAllReports()
        {
            var reports = await _context.LegalReports
                .Include(r => r.Case)
                .Include(r => r.User)
                .Where(r => !r.IsDeleted)
                .Select(r => new LegalReportDto
                {
                    ReportID = r.ReportID,
                    CaseID = r.CaseID,
                    CaseTitle = r.Case.CaseTitle,
                    GeneratedByName = r.User.Name,
                    ReportFilePath = r.ReportFilePath,
                    GeneratedAt = r.GeneratedAt
                })
                .ToListAsync();

            return Ok(reports);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteReport(int id)
        {
            var report = await _context.LegalReports.FindAsync(id);

            if (report == null)
                return NotFound("Report not found.");

            report.IsDeleted = true;
            report.DeletedAt = DateTime.Now;
            await _context.SaveChangesAsync();

            return Ok(new { message = "Report deleted successfully." });
        }
    }
}
